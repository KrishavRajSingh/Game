// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String  @id @default(uuid())
  username  String  @unique
  email String  @unique
  password  String
  createdAt DateTime  @default(now())
  gamesAsWhite  Game[]  @relation("GamesAsWhite")
  gamesAsBlack  Game[]  @relation("GamesAsBlack")
  chats Chat[]
}

model Game {
  id  String  @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer User  @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer User  @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  status  GameStatus
  result  GameResult?
  currentFen  String?
  startAt DateTime  @default(now())
  endAt DateTime?
  moves Move[]
  chats Chat[]

  @@index([status, result])
  @@index([whitePlayerId])
  @@index([blackPlayerId])
}

model Move{
  id  String  @id @default(uuid())
  gameId  String
  game  Game  @relation(fields: [gameId], references: [id])
  moveNumber  Int
  startFen  String
  endFen  String
  timeTaken Int?  @default(0)
  createdAt DateTime  @default(now())

  @@index([gameId])
}

model Chat {
  id  String  @id @default(uuid())
  gameId  String
  game  Game  @relation(fields: [gameId], references: [id])
  userId  String
  user  User  @relation(fields: [userId], references: [id])
  message String
  createdAt DateTime  @default(now())

  @@index([gameId])
  @@index([userId])
}

enum  GameStatus  {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum  GameResult  {
  WHITE_WINS
  BLACK_WINS
  DRAW
}